#! /bin/bash
root=`dirname $0`

if [ $root = . ]
then root=$PWD
fi

specdir="/home/lee/project/spec2006/benchspec/CPU2006/"

if [ ! -d $specdir ]
then
	echo "Directory not specified for Spec2000/2006!"
	exit
fi

####################################################
#                                                  #
#              Gem5 System Settings                #
#                                                  #
####################################################

cpuType="DerivO3CPU"
cpuVoltage=""
sysClock=""
cpuClock=""
maxTime=""

memType=""
memChannels=""
memRanks=""
memSize="1024 MB"

enableCaches="Yes"
	numDirs=""
	cacheLineSize=""
	L1Dsize=""
	L1Dassoc=""
	L1Isize=""
	L1Iassoc=""
	enableL2Cache="No"
		numL2Caches=""
		L2Size=""
		L2assoc=""
	numL3Caches=""
	L3Size=""
	L3assoc=""

debugOn="No"
	debugOutputFile=""
	debugFlags="Fetch"

###################################################

#TODO
#argumentsList="cpuType cpuVoltage "

basicOption="--cpu-type=DerivO3CPU --caches"

if [ ${debugOn}x = Yesx ]
then 
	if [ ${debugFlags}x = x ]
	then gem5Option="$gem5Option --debug-flags=O3CPU"
	else gem5Option="$gem5Option --debug-flags=$debugFlags"
	fi
	if [ ${debugOutputFile}x = x ]
	then gem5Option="$gem5Option --debug-file=$root/m5out/debug.log"
	else gem5Option="$gem5Option --debug-file=$debugOutputFile"
	fi
fi

#TODO
#if [ ${memSize}x != x ]
#then basicOption="$basicOption --mem-size=$memSize"
#fi

if [ -f /bin/lsnc ]
then filelist=`lsnc $specdir`
else filelist=`ls $specdir`
fi

for file in $filelist
do
	#echo -n $file
	if [ ! -d $specdir/$file/run/build_base_riscv.0001 ]
	then
		#echo " Fail"
		continue
	fi
	errinfo=`cat $specdir/$file/run/build_base_riscv.0001/make.err | grep Error`
	if [ "${errinfo}x" = x ]
	then 
		#echo " Pass"
		testlist="$testlist $file"
	#else echo " Fail"
	fi
done
testlist=($testlist)

if [ ${1}x = -hx -o ${1}x = x ]
then 
	echo "Usage: run [OPTION]" 
	echo "    -h, --help=[<target file> <more options>]"
	echo "        Use -h to see help info or use more options for gem5.opt and config file!" 
	echo "        If <more options> exists, it will be directly passed to the file specified" 
	echo "        by <target file>; Otherwise, help information will be showed!"
	echo "        -->Target file options:"
	echo "        <gem5> Show help information for gem5.opt"
	echo "        <se> Show help information for se.py"
	echo "        <all> Show all the help information listed above; <more options> is not"
	echo "            allowed here!"
	echo "    -l, --list  Use -l to list valid spec programs!"
	echo "    -p, --spec=<spec program name/number>  If the spec program is not given, then it will"
	echo "        be chosen randomly!"
	if [ ${2}x = allx -a ${3}x != x ]
	then 
		echo "Unknown argument! Use -h for more help!"
		exit
	fi
	if [ ${2}x = gem5x -o ${2}x = allx ]
	then
		echo
		echo -e "\033[1;31m            gem5.opt options based on given arguments         \033[0m"
		echo "================================================================="
		if [ ${3}x = x ]
		then $root/build/RISCV/gem5.opt -h
		else 
			shift 2
			$root/build/RISCV/gem5.opt $*
		fi
		echo "================================================================="
	fi
	if [ ${2}x = sex -o ${2}x = allx ]
	then
		echo
		echo -e "\033[1;31m              se.py options based on given arguments         \033[0m"
		echo "================================================================="
		if [ ${3}x = x ]
		then $root/build/RISCV/gem5.opt $root/configs/example/se.py -h
		else 
			shift 2
			$root/build/RISCV/gem5.opt $root/configs/example/se.py $*
		fi
		echo "================================================================="
	fi
	exit
else 
	if [ ${1}x = -lx ]
	then 
		for item in ${testlist[*]}
		do echo $item
		done
		exit
	else 
		if [ ${1}x != -px ]
		then echo "Unknown argument! Use -h for more help!" 
			exit
		fi
	fi
fi

if [ ${1}x = -px ]
then 
	if [ ${2}x != x ]
	then
		i=0
		while [ $i -lt ${#testlist[*]} ]
		do
			name=(`echo ${testlist[$i]} | sed 's/\./ /g'`)
			#echo ${name[*]}
			if [ $2 = ${name[0]} -o $2 = ${name[1]} ]
			then 
				target=(${name[*]})
				break
			fi
			i=$[i + 1]
		done
		if [ ${target}x = x ]
		then 
			echo "Bad spec program number/name or the spec program is not valid!"
			exit
		fi
	else 
		i=$[$RANDOM % ${#testlist[*]} ]
		target=(`echo ${testlist[$i]} | sed 's/\./ /g'`)
	fi
else 
	echo "Bad argument! Use -h for help!"
	exit
fi

fulltarget="${target[0]}.${target[1]}"
target=${target[1]}
#mcf=(a b c)
#echo `eval echo -e '$'"{$target[1]}"`
#exit

if [ $target = h264ref ]
then 
	echo "Problem has been reported with h264ref due to fseek!"
	exit
fi

set -e
cd $root
scons -j4 ./build/RISCV/gem5.opt CPU_MODEL=O3CPU

###################################################
#                                                 #
# Arguments settings for different spec programs! #
#                                                 #
###################################################

bzip2=(bzip2 "-o" "./data/ref/input/chiken.jpg 30")
# bzip2=(bzip2 "-o ./data/ref/input/input.source 280") 
# bzip2=(bzip2 "-o ./data/ref/input/liberty.jpg 30")
# bzip2=(bzip2 "-o ./data/ref/input/input.program 280")
# bzip2=(bzip2 "-o ./data/ref/input/text.html 280")
# bzip2=(bzip2 "-o ./data/ref/input/input.combined 200")
gcc=(gcc "-o" "./data/ref/input/166.i -o ./run/build_base_riscv.0001/166.s")
# gcc=(gcc "-o" "./data/ref/input/166.i -o ./run/build_base_riscv.0001/166.s")
# gcc=(gcc "-o" "./data/ref/input/200.i -o ./run/build_base_riscv.0001/200.s")
# gcc=(gcc "-o" "./data/ref/input/c-typeck.i -o ./run/build_base_riscv.0001/c-typeck.s")
# gcc=(gcc "-o" "./data/ref/input/c-decl.i -o ./run/build_base_riscv.0001/c-decl.s")
# gcc=(gcc "-o" "./data/ref/input/expr.i -o ./run/build_base_riscv.0001/expr.s")
# gcc=(gcc "-o" "./data/ref/input/expr2.i -o ./run/build_base_riscv.0001/expr2.s")
# gcc=(gcc "-o" "./data/ref/input/g23.i -o ./run/build_base_riscv.0001/g23.s")
# gcc=(gcc "-o" "./data/ref/input/s04.i -o ./run/build_base_riscv.0001/s04.s")
# gcc=(gcc "-o" "./data/ref/input/scilab.i -o ./run/build_base_riscv.0001/scilab.s")
mcf=(mcf "-o ./data/ref/input/inp.in")
milc=(milc "-i ./data/ref/input/su3imp.in")
namd=(namd "-o" "--input ./data/all/input/namd.input --iterations 38")
gobmk=(gobmk "-o" "--quiet --mode gtp" "-i ./data/ref/input/13x13.tst")
# gobmk=(gobmk "-o" "--quiet --mode gtp" "-i ./data/ref/input/nngs.tst")
# gobmk=(gobmk "-o" "--quiet --mode gtp" "-i ./data/ref/input/score2.tst")
# gobmk=(gobmk "-o" "--quiet --mode gtp" "-i ./data/ref/input/trevorc.tst")
# gobmk=(gobmk "-o" "--quiet --mode gtp" "-i ./data/ref/input/trevorf.tst")
hmmer=(hmmer "-o" "./data/ref/input/nph3.hmm ./data/ref/input/swiss41")
# hmmer=(hmmer "-o" "--fixed 0 --mean 500 --num 500000 --sd 350 --seed 0 ./data/ref/input/retro.hmm")
sjeng=(sjeng "-o ./data/ref/input/ref.txt")
libquantum=(libquantum "-o" "1397 8")
# h264ref=(h264ref "-o" "-d ./data/ref/input/foreman_ref_encoder_baseline.cfg") # bad now
# h264ref=(h264ref "-o" "-d ./data/ref/input/foreman_ref_encoder_main.cfg")
h264ref=(h264ref "-o" "-d ./data/ref/input/sss_encoder_main.cfg")
lbm=(lbm "-o" "3000 ./run/build_base_riscv.0001/reference.dat 0 0 ./data/ref/input/100_100_130_ldc.of")
omnetpp=(omnetpp "-o ./data/ref/input/omnetpp.ini")
astar=(astar "-o ./data/ref/input/BigLakes2048.cfg")
# astar=(astar "-o ./data/ref/input/BigLakes2048.cfg")
specrand=(specrand "-o" "1255432124 234923")
sphinx3=(sphinx_livepretend "-o" "./run/build_base_riscv.0001/ctlfile ./run/build_base_riscv.0001 ./data/ref/input/args.an4")
xalancbmk=(Xalan "-o" "-v ./run/build_base_riscv.0001/t5.xml ./data/ref/input/xalanc.xsl")

################################################

echo -e "\033[1;31m ==================== Running Spec $fulltarget! ====================\033[0m"

cd $specdir/$fulltarget

if [ "`eval echo -e '$'"{$target[1]}"`" = -o ]
then 
	$root/build/RISCV/gem5.opt $gem5Option $root/configs/example/se.py $basicOption -c ./run/build_base_riscv.0001/`eval echo -e '$'"{$target[0]}"` `eval echo -e '$'"{$target[1]}"` "`eval echo -e '$'"{$target[2]}"`" `eval echo -e '$'"{$target[3]}"`
else 
	$root/build/RISCV/gem5.opt $gem5Option $root/configs/example/se.py $basicOption -c ./run/build_base_riscv.0001/`eval echo -e '$'"{$target[0]}"` `eval echo -e '$'"{$target[1]}"` `eval echo -e '$'"{$target[2]}"`
fi
