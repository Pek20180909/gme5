#! /bin/bash
root=$PWD

################# settings for script #################
setScript(){
	specDir="/home/lee/project/spec2006/benchspec/CPU2006"
	# root directory path for spec2006
	gem5Dir="/home/lee/project/gem5"
	# root directory path for gem5
	tempDir=$root
	# Where the temporary files should be stored
	ISA="X86"
	# [ARM ALPHA RISCV X86 MIPS]
	buildDir="build_base_`echo $ISA | tr 'A-Z' 'a-z'`.0001"
	buildDir=`echo $buildDir | sed 's/x86/amd64/g'`
	# [build_base_riscv.0001, build_base_arm.0001, build_base_alpha.0001,
	#  build_base_mips.0001, build_base_amd64.0001]
	runDir="run_base_TESTSET_amd64.0001"
	# Do not change this
	threads=4
	# num of threads you want to use when building gem5.opt
	testSet="test" # [ref test train]
	# Test_set setting
	runSpecSuites="Yes" # [Yes/No]
	# If you want to run all the tests in the given testSet
	bad_spec=""
	# Spec programs that may have problems
}

################# settings for gem5 #################
setGem5(){
	# build options
	buildModel="opt" # [fast debug opt]
	cpuModel="all" # [AtomicSimpleCPU CheckerCPU MinorCPU O3CPU TimingSimpleCPU all no]
	forceNotBuild="Yes" # [Yes/No] 
	# Set this to Yes to force this script not to build gem5 
	outputDir=""
	# outputDir option [default m5out]

	enableGlobal="Yes" # [Yes]
		cpuType="DerivO3CPU" # [TimingSimpleCPU AtomicSimpleCPU DerivO3CPU MinorCPU]
		# type of cpu to run with
		cpuVoltage="" # []
		# Top-level voltage for blocks running at system power supply
		sysClock="" # []
		# Top-level clock for blocks running at system speed
		cpuClock="" # []
		# Clock for blocks running at CPU speed
		maxTime="" # []
		# Run to the specified absolute simulated time in seconds
		numCpus="" # []

	enableSmt="Yes" # [Yes/No]
	enableSimpoint="No" # [Yes/No]

	enableMem="Yes"
		memType="" 
		# ['HBM_1000_4H_1x128', 'DRAMCtrl', 'DDR3_2133_8x8', 'HBM_1000_4H_1x64',
		# 'GDDR5_4000_2x32', 'HMC_2500_1x32', 'LPDDR3_1600_1x32', 'WideIO_200_1x128', 
		# 'DDR4_2400_8x8', 'DDR3_1600_8x8', 'DDR4_2400_4x16', 'DDR4_2400_16x4', 
		# 'SimpleMemory', 'LPDDR2_S4_1066_1x32']
		# type of memory to use
		memChannels=""
		# number of memory channels
		memRanks=""
		# number of memory ranks per channel
		memSize="4096MB"
		# Specify the physical memory size (single memory)

	enableCache="Yes"
		numDirs=""
		cacheLineSize=""
		L1Dsize=""
		L1Dassoc=""
		L1Isize=""
		L1Iassoc=""

	enableL2Cache="Yes"
		numL2Caches=""
		L2size=""
		L2assoc=""

	enableL3Cache="Yes"
		numL3Caches=""
		L3size=""
		L3assoc=""

	enableDebug="No" # [Yes/No]
		debugOutputFile="$gem5Dir/debug.log"
		debugFlags="O3CPU,Fetch" # ,Decode,Rename,IEW,Commit,FreeList" 
		# [Flag1, Flag2] use "-h gem5 --debug-help" to see the debug flags 
		debugStartTick=""
		debugEndTick=""
}

################# settings for spec #################
setSpec(){
	# 400
	perlbench_ref_0=(perlbench "-o" "-I./lib checkspam.pl 2500 5 25 11 150 1 1 1 1")
	perlbench_ref_1=(perlbench "-o" "-I./lib diffmail.pl 4 800 10 17 19 300")
	perlbench_ref_2=(perlbench "-o" "-I./lib splitmail.pl 1600 12 26 16 4500")
	perlbench_ref_single=0
	perlbench_train_0=(perlbench "-o" "-I./lib diffmail.pl 2 550 15 24 23 100")
	perlbench_train_1=(perlbench "-o" "-I./lib perfect.pl b 3")
	perlbench_train_2=(perlbench "-o" "-I./lib scrabbl.pl")
	perlbench_train_3=(perlbench "-o" "-I./lib splitmail.pl 535 13 25 24 1091")
	perlbench_train_4=(perlbench "-o" "-I./lib suns.pl")
	perlbench_train_single=0
	perlbench_test_0=(perlbench "-o" "-I./lib attrs.pl")
	perlbench_test_1=(perlbench "-o" "-I./lib gv.pl")
	perlbench_test_2=(perlbench "-o" "-I./lib makerand.pl")
	perlbench_test_3=(perlbench "-o" "-I./lib pack.pl")
	perlbench_test_4=(perlbench "-o" "-I./lib redef.pl")
	perlbench_test_5=(perlbench "-o" "-I./lib ref.pl")
	perlbench_test_6=(perlbench "-o" "-I./lib regmesg.pl")
	perlbench_test_7=(perlbench "-o" "-I./lib test.pl")
	perlbench_test_single=0
	# Some errors occurred while running this spec on real machine

	# 401
	bzip2_ref_0=(bzip2 "-o" "chicken.jpg 30")
	bzip2_ref_1=(bzip2 "-o" "input.source 280") 
	bzip2_ref_2=(bzip2 "-o" "liberty.jpg 30")
	bzip2_ref_3=(bzip2 "-o" "input.program 280")
	bzip2_ref_4=(bzip2 "-o" "text.html 280")
	bzip2_ref_5=(bzip2 "-o" "input.combined 200")
	bzip2_ref_single=0
	bzip2_train_0=(bzip2 "-o" "input.program 10")
	bzip2_train_1=(bzip2 "-o" "byoudoin.jpg 5")
	bzip2_train_2=(bzip2 "-o" "input.combined 80")
	bzip2_train_single=0
	bzip2_test_0=(bzip2 "-o" "input.program 5")
	bzip2_test_1=(bzip2 "-o" "dryer.jpg 2")
	bzip2_test_single=0

	# 403
	gcc_ref_0=(gcc "-o" "166.i -o 166.s")
	gcc_ref_1=(gcc "-o" "200.i -o 200.s")
	gcc_ref_2=(gcc "-o" "c-typeck.i -o c-typeck.s")
	gcc_ref_3=(gcc "-o" "c-decl.i -o c-decl.s")
	gcc_ref_4=(gcc "-o" "expr.i -o expr.s")
	gcc_ref_5=(gcc "-o" "expr2.i -o expr2.s")
	gcc_ref_6=(gcc "-o" "g23.i -o g23.s")
	gcc_ref_7=(gcc "-o" "s04.i -o s04.s")
	gcc_ref_8=(gcc "-o" "scilab.i -o scilab.s")
	gcc_ref_single=0
	gcc_train_0=(gcc "-o" "integrate.i -o integrate.s")
	gcc_test_0=(gcc "-o" "cccp.i -o cccp.s")

	# 410
	bwaves_ref_0=(bwaves)
	bwaves_train_0=(bwaves)
	bwaves_test_0=(bwaves)
	# In fact, bwaves does not take any arguments!

	# 416
	gamess_ref_0=(gamess "-i cytosine.2.config")
	gamess_ref_1=(gamess "-i h2ocu2+.gradient.config")
	gamess_ref_2=(gamess "-i triazolium.config")
	gamess_ref_single=0
	gamess_train_0=(gamess "-i h2ocu2+.energy.config")
	gamess_test_0=(gamess "-i exam29.config")

	# 429
	mcf_ref_0=(mcf "-o" "inp.in")
	mcf_train_0=(mcf "-o" "inp.in")
	mcf_test_0=(mcf "-o" "inp.in")

	# 433
	milc_ref_0=(milc "-i su3imp.in")
	milc_train_0=(milc "-i su3imp.in")
	milc_test_0=(milc "-i su3imp.in")

	# 434
	zeusmp_ref_0=(zeusmp)
	zeusmp_train_0=(zeusmp)
	zeusmp_test_0=(zeusmp)

	# 435
	gromacs_ref_0=(gromacs "-o" "-silent -deffnm gromacs -nice 0")
	gromacs_train_0=(gromacs "-o" "-silent -deffnm gromacs -nice 0")
	gromacs_test_0=(gromacs "-o" "-silent -deffnm gromacs -nice 0")

	# 436
	cactusADM_ref_0=(cactusADM "-o" "benchADM.par")
	cactusADM_train_0=(cactusADM "-o" "benchADM.par")
	cactusADM_test_0=(cactusADM "-o" "benchADM.par")
	# Some errors occurred while running this spec on real machine
	
	# 437
	leslie3d_ref_0=(leslie3d "-i leslie3d.in")
	leslie3d_train_0=(leslie3d "-i leslie3d.in")
	leslie3d_test_0=(leslie3d "-i leslie3d.in")

	# 444
	namd_ref_0=(namd "-o" "--input namd.input --iterations 38 --output namd.out")
	namd_train_0=(namd "-o" "--input namd.input --iterations 1 --output named.out")
	namd_test_0=(namd "-o" "--input namd.input --iterations 1 --output named.out")

	# 445
	gobmk_ref_0=(gobmk "-o" "--quiet --mode gtp" "-i 13x13.tst")
	gobmk_ref_1=(gobmk "-o" "--quiet --mode gtp" "-i nngs.tst")
	gobmk_ref_2=(gobmk "-o" "--quiet --mode gtp" "-i score2.tst")
	gobmk_ref_3=(gobmk "-o" "--quiet --mode gtp" "-i trevorc.tst")
	gobmk_ref_4=(gobmk "-o" "--quiet --mode gtp" "-i trevorf.tst")
	gobmk_ref_single=0
	gobmk_train_0=(gobmk "-o" "--quiet --mode gtp" "-i arb.tst")
	gobmk_train_1=(gobmk "-o" "--quiet --mode gtp" "-i arend.tst")
	gobmk_train_2=(gobmk "-o" "--quiet --mode gtp" "-i arion.tst")
	gobmk_train_3=(gobmk "-o" "--quiet --mode gtp" "-i atari_atari.tst")
	gobmk_train_4=(gobmk "-o" "--quiet --mode gtp" "-i blunder.tst")
	gobmk_train_5=(gobmk "-o" "--quiet --mode gtp" "-i buzco.tst")
	gobmk_train_6=(gobmk "-o" "--quiet --mode gtp" "-i nicklas2.tst")
	gobmk_train_7=(gobmk "-o" "--quiet --mode gtp" "-i nicklas4.tst")
	gobmk_train_single=0
	gobmk_test_0=(gobmk "-o" "--quiet --mode gtp" "-i capture.tst")
	gobmk_test_1=(gobmk "-o" "--quiet --mode gtp" "-i connect.tst")
	gobmk_test_2=(gobmk "-o" "--quiet --mode gtp" "-i connect_rot.tst")
	gobmk_test_3=(gobmk "-o" "--quiet --mode gtp" "-i connection.tst")
	gobmk_test_4=(gobmk "-o" "--quiet --mode gtp" "-i connection_rot.tst")
	gobmk_test_5=(gobmk "-o" "--quiet --mode gtp" "-i cutstone.tst")
	gobmk_test_7=(gobmk "-o" "--quiet --mode gtp" "-i dniwog.tst")
	gobmk_test_single=0

	# 447
	dealII_ref_0=(dealII "-o" "23")
	dealII_train_0=(dealII "-o" "10")
	dealII_test_0=(dealII "-o" "8")

	# 450
	soplex_ref_0=(soplex "-o" "-m3500 ref.mps")
	soplex_ref_1=(soplex "-o" "-s1 -e -m45000 pds-50.mps")
	soplex_ref_single=0
	soplex_train_0=(soplex "-o" "-m1200 train.mps")
	soplex_train_1=(soplex "-o" "-s1 -e -m5000 pds-20.mps")
	soplex_train_single=0
	soplex_test_0=(soplex "-o" "-m10000 test.mps")

	# 453
	povray_ref_0=(povray "-o" "SPEC-benchmark-ref.ini")
	povray_train_0=(povray "-o" "SPEC-benchmark-train.ini")
	povray_test_0=(povray "-o" "SPEC-benchmark-test.ini")

	# 454
	calculix_ref_0=(calculix "-o" "-i hyperviscoplastic")
	calculix_train_0=(calculix "-o" "-i stairs")
	calculix_test_0=(calculix "-o" "-i beampic")

	# 456
	hmmer_ref_0=(hmmer "-o" "nph3.hmm swss4")
	hmmer_ref_1=(hmmer "-o" "--fxe 0 --mean 500 --num 500000 --sd 350 --seed 0 retro.hmm")
	hmmer_ref_single=0
	hmmer_train_0=(hmmer "-o" "--fixed 0 --mean 425 --num 85000 --sd 300 --seed 0 leng100.hmm")
	hmmer_test_0=(hmmer "-o" "--fixed 0 --mean 325 --num 45000 --sd 200 --seed 0 bombesin.hmm")

	# 458
	sjeng_ref_0=(sjeng "-o" "ref.txt")
	sjeng_train_0=(sjeng "-o" "train.txt")
	sjeng_test_0=(sjeng "-o" "test.txt")

	# 459
	GemsFDTD_ref_0=(GemsFDTD)
	GemsFDTD_train_0=(GemsFDTD)
	GemsFDTD_test_0=(GemsFDTD)

	# 462
	libquantum_ref_0=(libquantum "-o" "1397 8")
	libquantum_train_0=(libquantum "-o" "143 25")
	libquantum_test_0=(libquantum "-o" "33 5")

	# 464
	h264ref_ref_0=(h264ref "-o" "-d foreman_ref_encoder_baseline.cfg") # broken now
	h264ref_ref_1=(h264ref "-o" "-d foreman_ref_encoder_main.cfg")
	h264ref_ref_2=(h264ref "-o" "-d sss_encoder_main.cfg")
	h264ref_ref_single=2
	h264ref_train_0=(h264ref "-o" "-d foreman_train_encoder_baseline.cfg")
	h264ref_test_0=(h264ref "-o" "-d foreman_test_encoder_baseline.cfg")
	# Some errors occurred while running this spec with RISCV's gem5 

	# 465
	tonto_ref_0=(tonto)
	tonto_train_0=(tonto)
	tonto_test_0=(tonto)
	# Some errors occurred while running this spec on real machine

	# 470
	lbm_ref_0=(lbm "-o" "3000 reference.dat 0 0 100_100_130_ldc.of")
	lbm_train_0=(lbm "-o" "300 reference.dat 0 0 100_100_130_cf_b.of")
	lbm_test_0=(lbm "-o" "3000 reference.dat 0 1 100_100_130_cf_a.of")

	# 471
	omnetpp_ref_0=(omnetpp "-o" "omnetpp.ini")
	omnetpp_train_0=(omnetpp "-o" "omnetpp.ini")
	omnetpp_test_0=(omnetpp "-o" "omnetpp.ini")

	# 473
	astar_ref_0=(astar "-o" "BigLakes2048.cfg")
	astar_ref_1=(astar "-o" "rivers.cfg")
	astar_ref_single=0
	astar_train_0=(astar "-o" "BigLakes1024.cfg")
	astar_train_1=(astar "-o" "rivers1.cfg")
	astar_train_single=0
	astar_test_0=(astar "-o" "lake.cfg")

	# 481
	wrf_ref_0=(wrf)
	wrf_train_0=(wrf)
	wrf_test_0=(wrf)

	# 482
	sphinx3_ref_0=(sphinx_livepretend "-o" "ctlfile . args.an4")
	sphinx3_train_0=(sphinx_livepretend "-o" "ctlfile . args.an4")
	sphinx3_test_0=(sphinx_livepretend "-o" "ctlfile . args.an4")
	# Some errors occurred while running this spec on real machine

	# 483
	xalancbmk_ref_0=(Xalan "-o" "-v t5.xml xalanc.xsl")
	xalancbmk_train_0=(Xalan "-o" "-v allbooks.xml xalanc.xsl")
	xalancbmk_test_0=(Xalan "-o" "-v test.xml xalanc.xsl")

	# 999
	specrand_ref_0=(specrand "-o" "1255432124 234923")
	specrand_train_0=(specrand "-o" "1 3")
	specrand_test_0=(specrand "-o" "324342 24239")
}

################# settings for settingParser #################
setArgLevel(){
	# argument level
	argLevel=("Global" "Simpoint" "Smt" "Mem" "Cache" "L2Cache" "L3Cache")
	formatLevel=("" "--simpoint" "--smt" "" "--caches" "--l2cache" "")

	# argument list
	argListGlobal=("cpuType" "cpuVoltage" "sysClock" "cpuClock" "maxTime" "numCpus")
	argListMem=("memType" "memChannels" "memRanks" "memSize")
	argListCache=("numDirs" "cacheLineSize" "L1Dsize" "L1Dassoc" "L1Isize" "L1Iassoc")
	argListL2Cache=("numL2Caches" "L2size" "L2assoc")
	argListL3Cache=("numL3Caches" "L3size" "L3assoc")

	# format list for arguments
	formatListGlobal=("--cpu-type" "--sys-voltage" "--sys-clock" "--cpu-clock" "--maxtime" "--num-cpus")
	formatListMem=("--mem-type" "--mem-channels" "--mem-ranks" "--mem-size")
	formatListCache=("--num-dirs" "--cacheline_size" "--l1d_size" "--l1d_assoc" "--l1i_size" "--l1i_assoc")
	formatListL2Cache=("--num-l2caches" "--l2_size" "--l2_assoc")
	formatListL3Cache=("--num-l3caches" "--l3_size" "--l3_assoc")

	buildOption="CPU_MODELS=$cpuModel"
}

################# print path for output files #################
printOutputInfo(){
	if [ ${runSpec}x != 1x ]
	then
		debugDir="$tempDir"
		gem5Options=`echo $gem5Options | sed "s%DEBUGDIR%$debugDir\/debug\.log%"`
	else
		debugDir="$tempDir/spec/$fullTarget/m5out"
		gem5Options=`echo $gem5Options | sed "s%DEBUGDIR%$debugDir\/debug\.log%"`
	fi
	
	if [ ${outputDir}x = x -a ${runSpec}x = 1x ]
	then 
		echo -e ">> Output files will be saved to \"\033[1;31m$tempDir/spec/$fullTarget/m5out\033[0m\"!"
		m5outDir="$tempDir/spec/$fullTarget/m5out"
	elif [ ${outputDir}x = x ]
	then 
		echo -e ">> Output files will be saved to \"\033[1;31m$tempDir/m5out\033[0m\"!"
		m5outDir=$tempDir/m5out
	else 
		echo -e ">> Output files will be saved to \"\033[1;31m$outputDir\033[0m\"!"
		m5outDir=$outputDir
	fi
	
	if [ ${enableDebug}x = Yesx ]
	then
		if [ ${debugOutputFile}x = x -a ${runSpec}x = 1x ]
		then echo -e ">> Debug data will be saved to \"\033[1;31m$tempDir/spec/$fullTarget/m5out/debug.log\033[0m\"!"
		elif [ ${debugOutputFile}x = x ]
		then echo -e ">> Debug data will be saved to \"\033[1;31m$tempDir/m5out\033[0m\"!"
		else echo -e ">> Debug data will be saved to \"\033[1;31m$debugOutputFile\033[0m\"!"
		fi
	fi
}

################# running gem5 with generated options #################
runGem5(){
	mkdir -p $debugDir
	
	if [ ${outputDir}x != x -a ! -d $outputDir/ ]
	then mkdir -p $outputDir
	fi
	
	if [ ${runSpec}x != 1x ]
	then
		if [ ${gem5Only}x = 1x ]
		then bash -c "`echo $gem5Dir/build/$ISA/gem5.$buildModel $options`"
		else bash -c "`echo $gem5Dir/build/$ISA/gem5.$buildModel $gem5Options $gem5Dir/configs/example/se.py $basicOptions $options`"
		fi
	else
		suiteID=0
		while [ "${options[$suiteID]}x" != x ]
		do
			echo -e "\033[1;31m    ==================== Runing SubTest-$suiteID! ====================\033[0m"
			bash -c "`echo $gem5Dir/build/$ISA/gem5.$buildModel $gem5Options $gem5Dir/configs/example/se.py $basicOptions ${options[$suiteID]}`"
			mv $m5outDir/stats.txt $m5outDir/stats_subset_$suiteID.txt
			suiteID=$[suiteID + 1]
		done
	fi
}

################# build gem5.opt #################
buildGem5(){
	if [ ${needBuild}x = 1x -a $forceNotBuild != Yes ]
	then 
		cd $gem5Dir
		scons -j$threads build/$ISA/gem5.$buildModel $buildOption
		if [ $? != 0 ]
		then exit
		fi
		if [ $USER != lee ]
		then chmod 777 -R $gem5Dir/build/ 2> /dev/null
		fi
		# This chmod should be enbaled on server!
	fi
}

################# get available spec programs #################
findSpec(){
	# buildDir=`echo $buildDir | sed 's/x86/amd64/g'`
	if [ ! -d $specDir ]
	then
		echo "Directory not specified for Spec2000/2006!"
		exit
	fi

	if [ -f /bin/lsnc ]
	then filelist=`lsnc $specDir`
	else filelist=`ls $specDir`
	fi

	for file in $filelist
	do
		if [ ! -d $specDir/$file/run/$buildDir ]
		then continue
		fi
		errinfo=`cat $specDir/$file/run/$buildDir/make.err | grep "error:"`
		if [ "${errinfo}x" = x ]
		then 
			delFlag=0
			for delete in $bad_spec
			do
				if [ $file = $delete -a $ISA = RISCV ]
				then
					delFlag=1
					break
				fi
			done
			if [ $delFlag != 1 ]
			then testlist="$testlist $file"
			fi
		fi
	done
	testlist=($testlist)
}

################# help infomation #################
printHelpInfo(){
	echo "Usage: se [OPTION]" 
	echo "    -h [-h <target file> <more options>]"
	echo "        Use -h to see help info or use more options for gem5.opt and config file!" 
	echo "        If <more options> exists, it will be directly passed to the file specified" 
	echo "        by <target file>; Otherwise, help information will be showed!"
	echo
	echo "        -->Target file options:"
	echo "           <gem5> Show help information for gem5.opt"
	echo "           <se> Show help information for se.py"
	echo 
	echo "    -l [-l] Use -l to list valid spec programs!"
	echo "    -p [-p <spec program name/number>]  If the spec program is not given, then"
	echo "        it will be chosen randomly!"
	echo "    -mp [-mp <programs list>] Running multiple programs! Program list should be"
	echo "        like \"prog1=arguments prog2=arguments\"!"
}

################# parse settings #################
settingParser(){
	################# decode debug args ##################
	if [ ${enableDebug}x = Yesx ]
	then 
		if [ "${debugFlags}x" != x ]
		then gem5Options="$gem5Options --debug-flags=$debugFlags"
		fi
		if [ ${debugOutputFile}x = x ]
		then gem5Options="$gem5Options --debug-file=DEBUGDIR"
		else gem5Options="$gem5Options --debug-file=$debugOutputFile"
		fi
		if [ ${debugStartTick}x != x ]
		then gem5Options="$gem5Options --debug-start=$debugStartTick"
		fi
		if [ ${debugEndTick}x != x ]
		then basicOptions="$basicOptions -m $debugEndTick"
		fi
	fi

	if [ ${outputDir}x != x ]
	then
		if [ -f $outputDir -a ! -d $outputDir ]
		then 
			echo "Can not redirect output to $outputDir: File exists!"
			exit
		else gem5Options="$gem5Options --outdir=$outputDir"
		fi
	fi

	################# decode other args ##################
	levelIdx=0
	for level in ${argLevel[*]}
	do
		#echo $level `eval echo -e '$'"enable$level"`
		if [ `eval echo -e '$'"enable$level"` = Yes ]
		then
			basicOptions="$basicOptions ${formatLevel[$levelIdx]}"
			argIdx=0
			for argName in `eval echo -e '$'"{argList$level[*]}"`
			do
				realArg=`eval echo -e '$'"$argName"`
				if [ ${realArg}x != x ]
				then basicOptions="$basicOptions `eval echo -e '$'"{formatList$level[$argIdx]}"`=$realArg"
				fi
				argIdx=$[argIdx + 1]
			done
		fi
		levelIdx=$[levelIdx + 1]
	done
	
	#if [ $ISA = X86 -a ${enableSmt}x = Yesx ]
	#then basicOptions="$basicOptions --ruby"
	#fi
}

################# parse script args #################
argParser(){
	################# help infomation #################
	if [ "${arguments[1]}x" = -hx -o "${arguments[1]}x" = x ] && [ "${arguments[2]}x" = x ]
	then printHelpInfo;exit
	fi

	case "${arguments[1]}x" in
	################# run multiple programs #################
	"-mpx")
		progIdx=0
		while [ "${arguments[$[progIdx + 2]]}x" != x ]
		do
			prog=(`echo ${arguments[$[progIdx + 2]]} | sed 's/=/ /'`)
			if [ -x ${prog[0]} -a ! -d ${prog[0]} ]
			then 
				progList[$progIdx]="${prog[0]}@%"
				argList[$progIdx]="${prog[*]:1:$[${#prog[*]} - 1]}@%"
			else 
				echo "${prog[0]}: No such file or this file is not excutable!"
				exit
			fi
			progIdx=$[progIdx + 1]
		done
		if [ $progIdx = 0 ]
		then
			echo "You must provide at least one program to run!"
			exit
		else 
			progList=`echo "${progList[*]} " | sed 's/@% /;/g'`
			argList=`echo "${argList[*]} " | sed 's/@% /;/g'`
			progList=${progList:0:$[${#progList} - 1]}
			argList=${argList:0:$[${#argList} - 1]}
		fi
		if [ "${argList}x" != x ]
		then options="-c '$progList' -o '$argList'"
		else options="-c '$progList'"
		fi
		needBuild=1;;
	
	################# run with given args #################
	"-hx")
		case "${arguments[2]}x" in
		gem5x)
			gem5Only=1
			if [ "${arguments[3]}x" = x ]
			then options="-h"
			else options=${arguments[*]:3:$[${#arguments[*]} - 3]}
			fi;;
		sex)
			if [ "${arguments[3]}x" = x ]
			then options="-h"
			else
				argIdx=3
				while [ "${arguments[$argIdx]}x" != x ]
				do 
					if [ `echo ${arguments[$argIdx]} | sed 's/;/ /g' | wc -w` -gt 1 ]
					then options="$options '${arguments[$argIdx]}'"
					else options="$options ${arguments[$argIdx]}"
					fi
					argIdx=$[argIdx + 1]
				done
			
				if [ "`echo $options | grep "\-c\|\-\-cmd"`"x != x ]
				then needBuild=1
				fi
			fi;;
		*)
			echo "Bad argument \"${arguments[2]}\"! Use -h for help!"
			exit;;
		esac;;
	
	################# list available spec programs #################
	"-lx")
		if [ "${#testlist[*]}" = 0 ]
		then echo "No available spec programs for $ISA!"
		fi
		for item in ${testlist[*]}
		do echo $item
		done
		exit;;

	################# select available spec programs #################
	"-px")
		if [ ${#testlist[*]} = 0 ]
		then
			echo "No available spec programs for $ISA!"
			exit
		fi
		
		if [ "${arguments[2]}x" != x ]
		then
			argIdx=0
			while [ $argIdx -lt ${#testlist[*]} ]
			do
				name=(`echo ${testlist[$argIdx]} | sed 's/\./ /g'`)
				#echo ${name[*]}
				if [ "${arguments[2]}" = ${name[0]} -o "${arguments[2]}" = ${name[1]} -o "${arguments[2]}" = ${testlist[$i]} ]
				then 
					target=(${name[*]})
					break
				fi
				argIdx=$[argIdx + 1]
			done
			if [ ${target}x = x ]
			then 
				echo "${arguments[2]}: Bad spec program number/name or the spec program is not valid!"
				echo "Use -l to see the available spec program list!"
				exit
			fi
		else
			argIdx=$[$RANDOM % ${#testlist[*]} ]
			target=(`echo ${testlist[$argIdx]} | sed 's/\./ /g'`)	
		fi
		fullTarget="${target[0]}.${target[1]}"
		target=${target[1]}
		runSpec=1
		needBuild=1;;
	*) 
		echo "Bad argument \"${arguments[1]}\"! Use -h for help!"
		exit;;
	esac
}

################# copy and link files needed for spec #################
buildSpecTemp(){
	if [ ${runSpec}x != 1x ]
	then return 
	fi
	
	echo -e ">> Files used for spec will be saved to \"\033[1;31m$tempDir/spec\033[0m\"!"
	
	mkdir -p $tempDir/spec/$fullTarget
	rm -rf $tempDir/spec/$fullTarget/*
	
	runDir=`echo $runDir | sed "s/TESTSET/$testSet/g"`

	if [ -d $specDir/$fullTarget/run/$runDir ]
	then file_list="$specDir/$fullTarget/run/$runDir/*"
	else 
		echo "RUN_DIR must be defined first!"
		exit
	fi

	for file in $file_list
	do
		cp -r $file $tempDir/spec/$fullTarget/`basename $file`
		if [ $? != 0 ]
		then
			echo "Error occurred while trying to build link for $file"
			exit
		fi
	done

	cp -r  $specDir/$fullTarget/run/$buildDir/`eval echo -e '$'"{${target}_${testSet}_0[0]}"` $tempDir/spec/$fullTarget/`eval echo -e '$'"{${target}_${testSet}_0[0]}"`

	# TODO We will get a warning if we are trying to use hard link
	# TODO or symbol link for the spec program. This problem should
	# TODO be taken into consideration if there is something wrong
	# TODO with the output result!
	
	cd $tempDir/spec/$fullTarget
}

################# generate options for spec #################
buildSpecOptions(){
	if [ ${runSpec}x != 1x ]
	then return
	fi
	
	echo -e "\033[1;31m ==================== Running Spec $fullTarget! ====================\033[0m"

	if [ $runSpecSuites = Yes ]
	then
		suiteID=0
		while [ "`eval echo -e '$'"{${target}_${testSet}_${suiteID}[0]}"`x" != x ]
		do
			if [ "`eval echo -e '$'"{${target}_${testSet}_${suiteID}[1]}"`" = "-o" ]
			then
				options[$suiteID]="-c ./`eval echo -e '$'"{${target}_${testSet}_${suiteID}[0]}"` `eval echo -e '$'"{${target}_${testSet}_${suiteID}[1]}"` '`eval echo -e '$'"{${target}_${testSet}_${suiteID}[2]}"`' `eval echo -e '$'"{${target}_${testSet}_${suiteID}[3]}"`"
			else
				options[$suiteID]="-c ./`eval echo -e '$'"{${target}_${testSet}_${suiteID}[0]}"` `eval echo -e '$'"{${target}_${testSet}_${suiteID}[1]}"` `eval echo -e '$'"{${target}_${testSet}_${suiteID}[2]}"` `eval echo -e '$'"{${target}_${testSet}_${suiteID}[3]}"`"
			fi
			suiteID=$[suiteID + 1]
		done
	else
		single=`eval echo -e '$'"${target}_${testSet}_single"`
		if [ ${single}x = x ]
		then single=0
		fi
		if [ "`eval echo -e '$'"{${target}_${testSet}_${single}[1]}"`" = "-o" ]
		then
			options[0]="-c ./`eval echo -e '$'"{${target}_${testSet}_${single}[0]}"` `eval echo -e '$'"{${target}_${testSet}_${single}[1]}"` '`eval echo -e '$'"{${target}_${testSet}_${single}[2]}"`' `eval echo -e '$'"{${target}_${testSet}_${single}[3]}"`"
		else
			options[0]="-c ./`eval echo -e '$'"{${target}_${testSet}_${single}[0]}"` `eval echo -e '$'"{${target}_${testSet}_${single}[1]}"` `eval echo -e '$'"{${target}_${testSet}_${single}[2]}"` `eval echo -e '$'"{${target}_${testSet}_${single}[3]}"`"
		fi
	fi
}

argIdx=1
arguments[0]="$0"
while [ "${1}x" != x ]
do
	arguments[$argIdx]="$1"
	shift 1
	argIdx=$[argIdx + 1]
done

setScript
setGem5
setArgLevel
setSpec
findSpec
settingParser
argParser
buildGem5
set -e
buildSpecOptions
buildSpecTemp
printOutputInfo
runGem5
