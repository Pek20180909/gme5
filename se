#! /bin/bash
root=`dirname $0`
cd $root
root=$PWD

specdir="/home/lee/project/spec2006/benchspec/CPU2006"
build_dir="build_base_riscv.0001"
run_dir="run_base_ref_stable.0001"
ISA="RISCV"
#build_dir="build_base_my.0001"
#ISA="X86"
threads=4
bad_spec="465.tonto"

if [ ! -d $specdir ]
then
	echo "Directory not specified for Spec2000/2006!"
	exit
fi

####################################################
#                                                  #
#              Gem5 System Settings                #
#                                                  #
####################################################

cpuModel="all" # [AtomicSimpleCPU CheckerCPU MinorCPU O3CPU TimingSimpleCPU no]
cpuType="MinorCPU" # [TimingSimpleCPU AtomicSimpleCPU DerivO3CPU MinorCPU]
cpuVoltage=""
sysClock=""
cpuClock=""
maxTime=""

memType=""
memChannels=""
memRanks=""
memSize="4096MB"

enableCaches="Yes"
	numDirs=""
	cacheLineSize=""
	L1Dsize=""
	L1Dassoc=""
	L1Isize=""
	L1Iassoc=""
	enableL2Cache="No"
		numL2Caches=""
		L2Size=""
		L2assoc=""
	numL3Caches=""
	L3Size=""
	L3assoc=""

debugOn="No" # [Yes/No]
	debugOutputFile=""
	debugFlags="O3PipeView"
	debugStartTick=""
	debugEndTick=""

###################################################

#TODO
#argumentsList="cpuType cpuVoltage "

buildOption="CPU_MODELS=$cpuModel"
basicOption="--cpu-type=$cpuType --caches --l2cache"

if [ ${debugOn}x = Yesx ]
then 
	if [ ${debugFlags}x != x ]
	then gem5Option="$gem5Option --debug-flags=$debugFlags"
	fi
	if [ ${debugOutputFile}x = x ]
	then gem5Option="$gem5Option --debug-file=DEBUGDIR"
	else gem5Option="$gem5Option --debug-file=$debugOutputFile"
	fi
	if [ ${debugStartTick}x != x ]
	then gem5Option="$gem5Option --debug-start=$debugStartTick"
	fi
	if [ ${debugEndTick}x != x ]
	then basicOption="$basicOption -m $debugEndTick"
	fi
fi

#TODO
if [ ${memSize}x != x ]
then basicOption="$basicOption --mem-size=$memSize"
fi

if [ -f /bin/lsnc ]
then filelist=`lsnc $specdir`
else filelist=`ls $specdir`
fi

for file in $filelist
do
	#echo -n $file
	if [ ! -d $specdir/$file/run/$build_dir ]
	then
		#echo " Fail"
		continue
	fi
	errinfo=`cat $specdir/$file/run/$build_dir/make.err | grep Error`
	if [ "${errinfo}x" = x ]
	then 
		#echo " Pass"
		delFlag=0
		for delete in $bad_spec
		do
			if [ $file = $delete -a $ISA = RISCV ]
			then
				delFlag=1
				break
			fi
		done
		if [ $delFlag != 1 ]
		then testlist="$testlist $file"
		fi
	#else echo " Fail"
	fi
done
testlist=($testlist)

if [ ${1}x = -hx -o ${1}x = x ]
then 
	echo "Usage: se [OPTION]" 
	echo "    -h, --help=[<target file> <more options>]"
	echo "        Use -h to see help info or use more options for gem5.opt and config file!" 
	echo "        If <more options> exists, it will be directly passed to the file specified" 
	echo "        by <target file>; Otherwise, help information will be showed!"
	echo
	echo "        -->Target file options:"
	echo "           <gem5> Show help information for gem5.opt"
	echo "           <se> Show help information for se.py"
	echo "           <all> Show all the help information listed above; <more options> is not"
	echo "            allowed here!"
	echo 
	echo "    -l, --list  Use -l to list valid spec programs!"
	echo "    -p, --spec=<spec program name/number>  If the spec program is not given, then"
	echo "        it will be chosen randomly!"
	if [ ${2}x = allx -a ${3}x != x ]
	then 
		echo "Unknown argument! Use -h for more help!"
		exit
	fi
	if [ ${2}x = gem5x -o ${2}x = allx ]
	then
		echo
		echo -e "\033[1;31m            gem5.opt options based on given arguments         \033[0m"
		echo "================================================================="
		if [ ${3}x = x ]
		then $root/build/$ISA/gem5.opt -h
		else 
			shift 2
			$root/build/$ISA/gem5.opt $*
		fi
		echo "================================================================="
	fi
	if [ ${2}x = sex -o ${2}x = allx ]
	then
		echo
		echo -e "\033[1;31m              se.py options based on given arguments         \033[0m"
		echo "================================================================="
		if [ ${3}x = x ]
		then $root/build/$ISA/gem5.opt $root/configs/example/se.py -h
		else 
			shift 2
			$root/build/$ISA/gem5.opt $root/configs/example/se.py $*
		fi
		echo "================================================================="
	fi
	exit
else 
	if [ ${1}x = -lx ]
	then 
		for item in ${testlist[*]}
		do echo $item
		done
		exit
	else 
		if [ ${1}x != -px ]
		then echo "Unknown argument! Use -h for more help!" 
			exit
		fi
	fi
fi

if [ ${1}x = -px ]
then 
	if [ ${2}x != x ]
	then
		i=0
		while [ $i -lt ${#testlist[*]} ]
		do
			name=(`echo ${testlist[$i]} | sed 's/\./ /g'`)
			#echo ${name[*]}
			if [ $2 = ${name[0]} -o $2 = ${name[1]} -o $2 = ${testlist[$i]} ]
			then 
				target=(${name[*]})
				break
			fi
			i=$[i + 1]
		done
		if [ ${target}x = x ]
		then 
			echo "Bad spec program number/name or the spec program is not valid!"
			exit
		fi
	else
		i=$[$RANDOM % ${#testlist[*]} ]
		target=(`echo ${testlist[$i]} | sed 's/\./ /g'`)
	fi
else 
	echo "Bad argument! Use -h for help!"
	exit
fi

fulltarget="${target[0]}.${target[1]}"
target=${target[1]}
#mcf=(a b c)
#echo `eval echo -e '$'"{$target[1]}"`
#exit

set -e
cd $root
scons -j$threads $root/build/$ISA/gem5.opt $buildOption

###################################################
#                                                 #
# Arguments settings for different spec programs! #
#                                                 #
###################################################

# 400
perlbench=(perlbench "-o" "-I ./lib ./checkspam.pl 2500 5 25 11 150 1 1 1 1")
#perlbench=(perlbench "-o" "-I ./lib ./diffmail.pl 4 800 10 17 19 300")
#perlbench=(perlbench "-o" "-I ./lib ./splitmail.pl 1600 12 26 16 4500")
# Some errors occurred while running this spec on real machine

# 401
bzip2=(bzip2 "-o" "./chiken.jpg 30")
# bzip2=(bzip2 "-o ./input.source 280") 
# bzip2=(bzip2 "-o ./liberty.jpg 30")
# bzip2=(bzip2 "-o ./input.program 280")
# bzip2=(bzip2 "-o ./text.html 280")
# bzip2=(bzip2 "-o ./input.combined 200")

# 403
gcc=(gcc "-o" "./166.i -o ./166.s")
# gcc=(gcc "-o" "./200.i -o ./200.s")
# gcc=(gcc "-o" "./c-typeck.i -o ./c-typeck.s")
# gcc=(gcc "-o" "./c-decl.i -o ./c-decl.s")
# gcc=(gcc "-o" "./expr.i -o ./expr.s")
# gcc=(gcc "-o" "./expr2.i -o .//expr2.s")
# gcc=(gcc "-o" "./g23.i -o ./g23.s")
# gcc=(gcc "-o" "./s04.i -o ./s04.s")
# gcc=(gcc "-o" "./scilab.i -o ./scilab.s")

# 410
bwaves=(bwaves)
# In fact, bwaves does not take any arguments!

# 416
gamess=(gamess "-i ./cytosine.2.config")
#gamess=(gamess "-i ./h2ocu2+.gradient.config")
#games=(gamess "-i ./triazolium.config")

# 429
mcf=(mcf "-o" "./inp.in")

# 433
milc=(milc "-i ./su3imp.in")

# 434
zeusmp=(zeusmp)

# 435
gromacs=(gromacs "-o" "-silent -deffnm gromacs -nice 0")

# 436
cactusADM=(cactusADM "-o" "./benchADM.par")
# Some errors occurred while running this spec on real machine

# 437
leslie3d=(leslie3d "-i ./leslie3d.in")

# 444
namd=(namd "-o" "--input ./namd.input --iterations 38")

# 445
gobmk=(gobmk "-o" "--quiet --mode gtp" "-i ./13x13.tst")
# gobmk=(gobmk "-o" "--quiet --mode gtp" "-i ./nngs.tst")
# gobmk=(gobmk "-o" "--quiet --mode gtp" "-i ./score2.tst")
# gobmk=(gobmk "-o" "--quiet --mode gtp" "-i ./trevorc.tst")
# gobmk=(gobmk "-o" "--quiet --mode gtp" "-i ./trevorf.tst")

# 454
calculix=(calculix "-o" "-i hyperviscoplastic")

# 456
hmmer=(hmmer "-o" "./nph3.hmm ./swiss41")
# hmmer=(hmmer "-o" "--fixed 0 --mean 500 --num 500000 --sd 350 --seed 0 ./retro.hmm")

# 458
sjeng=(sjeng "-o" "./ref.txt")

# 459
GemsFDTD=(GemsFDTD)

# 462
libquantum=(libquantum "-o" "1397 8")

# 464
# h264ref=(h264ref "-o" "-d ./foreman_ref_encoder_baseline.cfg") # bad now
# h264ref=(h264ref "-o" "-d ./foreman_ref_encoder_main.cfg")
h264ref=(h264ref "-o" "-d ./sss_encoder_main.cfg")
# Some errors occurred while running this spec with RISCV's gem5 

# 465
tonto=(tonto)
# Some errors occurred while running this spec on real machine

# 470
lbm=(lbm "-o" "3000 ./reference.dat 0 0 ./100_100_130_ldc.of")

# 471
omnetpp=(omnetpp "-o" "./omnetpp.ini")

# 473
astar=(astar "-o ./BigLakes2048.cfg")
# astar=(astar "-o ./rivers.cfg")

# 481
wrf=(wrf) 

# 482
sphinx3=(sphinx_livepretend "-o" "./ctlfile . ./args.an4")
# Some errors occurred while running this spec on real machine

# 483
xalancbmk=(Xalan "-o" "-v ./t5.xml ./xalanc.xsl")

# 999
specrand=(specrand "-o" "1255432124 234923")

################################################

mkdir -p $root/spec/$fulltarget

if [ -d $specdir/$fulltarget/run/$run_dir ]
then file_list="$specdir/$fulltarget/run/$run_dir/*"
else 
	echo "RUN_DIR must be defined first!"
	exit
fi
#file_list=$specdir/$fulltarget/data/ref/input/*
#if [ -d $specdir/$fulltarget/data/all ]
#then file_list="$file_list $specdir/$fulltarget/data/all/input/*"
#fi

for file in $file_list
do
	ln -sf $file $root/spec/$fulltarget/`basename $file`
	if [ $? != 0 ]
	then
		echo "Error occurred while trying to build link for $file"
		exit
	fi
done

# TODO We may get a warning if we are trying to use hard link
# TODO or symbol link for the spec program. This problem should
# TODO be taken into consideration if there is something wrong
# TODO with the output result!

#rm -rf $root/spec/$fulltarget/`eval echo -e '$'"{$target[0]}"`

ln -sf $specdir/$fulltarget/run/$build_dir/`eval echo -e '$'"{$target[0]}"` $root/spec/$fulltarget/`eval echo -e '$'"{$target[0]}"`

#cp $specdir/$fulltarget/run/$build_dir/`eval echo -e '$'"{$target[0]}"` $root/spec/$fulltarget/`eval echo -e '$'"{$target[0]}"`

echo -e "\033[1;31m ==================== Running Spec $fulltarget! ====================\033[0m"

cd $root/spec/$fulltarget
debug_dir="$root/spec/$fulltarget/m5out"
mkdir -p $debug_dir
gem5Option=`echo $gem5Option | sed "s%DEBUGDIR%$debug_dir\/debug\.log%"` 

if [ "`eval echo -e '$'"{$target[1]}"`" = "-o" ]
then
	$root/build/$ISA/gem5.opt $gem5Option $root/configs/example/se.py $basicOption -c ./`eval echo -e '$'"{$target[0]}"` `eval echo -e '$'"{$target[1]}"` "`eval echo -e '$'"{$target[2]}"`" `eval echo -e '$'"{$target[3]}"`
else
	$root/build/$ISA/gem5.opt $gem5Option $root/configs/example/se.py $basicOption -c ./`eval echo -e '$'"{$target[0]}"` `eval echo -e '$'"{$target[1]}"` `eval echo -e '$'"{$target[2]}"` `eval echo -e '$'"{$target[3]}"`
fi
